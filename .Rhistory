# Load the Data
list.files()
wqr <- read.csv("wineQualityReds.csv")
names(wqr)
# function for repeated plots under this section
boxgram_grid <- function(data_set, variable_name, bin_width, var_name) {
title_name = paste(var_name, "Histogram")
p1 <- ggplot(aes(variable_name), data =  data_set) +
geom_histogram(binwidth = bin_width, color = "Black", fill = I("#800020")) +
ggtitle(title_name) +
xlab(var_name)
p2 <- ggplot(aes(x = "Jittered Values", y = variable_name), data = data_set) +
geom_jitter(alpha = 0.1) +
geom_boxplot(alpha = 0.2, color = I("#800020")) +
ggtitle("Box Plot") +
ylab(var_name) +
stat_summary(fun.y = "mean",
geom = "point",
color = "blue",
shape = 20,
size = 3)
grid.arrange(p1, p2, ncol=2)
}
out_message <- function(variable){
# Outlier target
target <- round(mean(variable) + sd(variable) * 3, 2)
message(paste("Values greater than or equal to",
target, "are outliers."))
# Outlier Count
outlier_count <- length(subset(variable, variable >= target))
message(paste("There are", outlier_count, "outliers in this variable."))
}
univar_summary <- function(data_set, variable){
options(scipen=0)
options(digits = 8)
variable <- eval(substitute(variable), data_set)
data_set <- data.frame(variable)
print(summary(data_set$variable))
out_message(data_set$variable)
message("The statistics after outlier removal are shown below:")
print(summary(subset(data_set, select = variable,
variable < mean(variable) + sd(variable) * 3)$variable))
}
boxgram_grid(wqr, wqr$alcohol, 0.5, "Alcohol % by Volume")
univar_summary(wqr, alcohol)
boxgram_grid(wqr, wqr$volatile.acidity, 0.1, "Volatile Acidity")
univar_summary(wqr, volatile.acidity)
boxgram_grid(wqr, wqr$sulphates, 0.1, "Sulphates")
univar_summary(wqr, sulphates)
boxgram_grid(wqr, wqr$citric.acid, 0.05, "Citric Acid")
univar_summary(wqr, citric.acid)
# Discrete data
ggplot(aes(quality), data =  wqr) +
geom_bar(width = 1, color = "Black", fill = I("#800020")) +
scale_x_continuous(breaks = seq(3, 9, 1)) +
ggtitle("Quality of Red Wine - Scale form 0 to 10") +
xlab("Quality Rating") + ylab("Number of Ratings")
describe(wqr$quality)
ggplot(aes(alcohol), data = wqr) +
geom_histogram(binwidth = .4, color = "Black", fill = I("#800020")) +
facet_wrap(~quality, scales = "free") +
ggtitle("Alcohol % by Volume Distributions by Quality")
ggplot(aes(x = alcohol, y = quality), data = wqr) +
geom_point(alpha = 1/4,
color = I("#800020"), fill = I("Black"), size = 2) +
stat_smooth(method = "lm", color = "Black") +
ggtitle("Quality Rank vs. Alcohol % by Volume")
ggplot(aes(x = alcohol, y = quality), data = wqr) +
geom_point(alpha = 1/4, position = position_jitter(),
color = I("#800020"), fill = I("Black"), size = 2) +
stat_smooth(method = "lm", color = "Black") +
ggtitle("Jittered Quality Rank vs. Alcohol % by Volume")
cor.test(wqr$alcohol, wqr$quality)
m1 <- lm(quality ~ alcohol, data = wqr)
summary.lm(m1)
set.seed(20022012)
wqr_samp <- subset(wqr[sample(1:length(wqr$quality), 1000), ], select = -X)
col_index <- function(data_set, column_name){
match(column_name, names(data_set))
}
ggpairs(wqr_samp, columns = c(col_index(wqr_samp, "fixed.acidity"),
col_index(wqr_samp, "pH"),
col_index(wqr_samp, "residual.sugar"),
col_index(wqr_samp, "quality")),
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
ggpairs(wqr_samp, columns = c(col_index(wqr_samp, "chlorides"),
col_index(wqr_samp, "free.sulfur.dioxide"),
col_index(wqr_samp, "total.sulfur.dioxide"),
col_index(wqr_samp, "density"),
col_index(wqr_samp, "quality")),
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
ggpairs(wqr_samp, columns = c(col_index(wqr_samp, "volatile.acidity"),
col_index(wqr_samp, "sulphates"),
col_index(wqr_samp, "citric.acid"),
col_index(wqr_samp, "alcohol"),
col_index(wqr_samp, "quality")),
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
plot_box_jit <- function(data_set,
x_var, x_name,
y_var, y_name,
clean_out){
# Setting variables
x_var <- eval(substitute(x_var), data_set)
y_var <- eval(substitute(y_var), data_set)
data_set.in <- data.frame(y_var, x_var)
if (clean_out) {
#OUTLIER DETECTION
clean_message <- "- No Overall Outliers"
x_var.above_out <- with(data_set.in, mean(x_var) + sd(x_var) * 3)
x_var.below_out <- with(data_set.in, mean(x_var) - sd(x_var) * 3)
y_var.above_out <- with(data_set.in, mean(y_var) + sd(y_var) * 3)
y_var.below_out <- with(data_set.in, mean(y_var) - sd(y_var) * 3)
data_set.in <- subset(data_set.in,
(x_var > x_var.below_out & x_var < x_var.above_out) &
(y_var > y_var.below_out & y_var < y_var.above_out))
} else {clean_message = ""}
# Creating the box plot
ggplot(aes(x = factor(x_var), y = y_var), data = data_set.in) +
geom_jitter(alpha = 0.3) +
geom_boxplot(alpha = .5, color = I("#800020")) +
stat_summary(fun.y = "mean",
geom = "point",
color = "blue",
shape = 20,
size = 2) +
ggtitle(paste(y_name, "on", x_name, "Segments", clean_message)) +
xlab(paste("Factor of", x_name)) +
ylab(y_name)
}
plot_box_jit(wqr, quality, "Quality", alcohol, "Alcohol % by Volume", FALSE)
plot_box_jit(wqr, quality, "Quality", volatile.acidity, "Volatile Acidity", FALSE)
plot_box_jit(wqr, quality, "Quality", sulphates, "Sulphates", FALSE)
scat_boxplot_grid <- function(data_set, qual_var, qual_name,
quant_var, quant_name,
bucket_var, bucket_name, clean_out){
# Setting variables
qual_var <- eval(substitute(qual_var), data_set)
quant_var <- eval(substitute(quant_var), data_set)
bucket_var <- eval(substitute(bucket_var), data_set)
# Creating new set to allow subsetting
data_set.in <- data.frame(qual_var, quant_var, bucket_var)
if (clean_out) {
cleaned_message <- "- No Overall Outliers"
#OUTLIER DETECTION
quant.above_out <- with(data_set.in, mean(quant_var) + sd(quant_var) * 3)
quant.below_out <- with(data_set.in, mean(quant_var) - sd(quant_var) * 3)
buck.above_out <- with(data_set.in, mean(bucket_var) + sd(bucket_var) * 3)
buck.below_out <- with(data_set.in, mean(bucket_var) - sd(bucket_var) * 3)
data_set.in <- subset(data_set.in,
(quant_var > quant.below_out & quant_var < quant.above_out) &
(bucket_var > buck.below_out & bucket_var < buck.above_out))
} else {cleaned_message = ""}
# Creating the scatterplot
p1 <- ggplot(aes(x = bucket_var, y = qual_var, color = quant_var),
data = data_set.in) +
geom_point(position = position_jitter(height = 5),
size = 1) +
stat_smooth(method = "lm", color = "Black") +
ggtitle(paste("Scatter Plot and Box Plot of", qual_name,
"vs \n", bucket_name, "and", quant_name, cleaned_message)) +
guides(color = guide_legend(title = quant_name, reverse = TRUE)) +
xlab(bucket_name) +
ylab(paste("Jittered", qual_name))
# Creating buckets for box plot on quartiles
data_set.in$alcohol.bucket = with(data_set.in,
cut(bucket_var, c(quantile(bucket_var, 0) - .00001,
quantile(bucket_var, .25),
quantile(bucket_var, .50),
quantile(bucket_var, .75),
quantile(bucket_var, 1))))
# Creating the box plot
p2 <- ggplot(aes(x = factor(qual_var), y = quant_var),
data = data_set.in) +
geom_boxplot(aes(fill = alcohol.bucket)) +
scale_fill_brewer(palette = "Reds",
guide = guide_legend(title = paste(bucket_name, "Buckets"))) +
xlab(paste("Factor of", qual_name)) +
ylab(quant_name)
grid.arrange(p1, p2, ncol = 1)
}
smooth_scatter <- function(data_set, x_var, x_name, y_var, y_name,
legend_var, legend_name,
brewer_palette, clean_out){
# Setting the variables and new frame
x_var <- eval(substitute(x_var), data_set)
y_var <- eval(substitute(y_var), data_set)
legend_var <- eval(substitute(legend_var), data_set)
data_set.in <- data.frame(x_var, y_var, legend_var)
if (clean_out) {
cleaned_message <- "- No Overall Outliers"
#OUTLIER DETECTION
x_var.above_out <- with(data_set.in, mean(x_var) + sd(x_var) * 3)
x_var.below_out <- with(data_set.in, mean(x_var) - sd(x_var) * 3)
y_var.above_out <- with(data_set.in, mean(y_var) + sd(y_var) * 3)
y_var.below_out <- with(data_set.in, mean(y_var) - sd(y_var) * 3)
data_set.in <- subset(data_set.in,
(x_var > x_var.below_out & x_var < x_var.above_out) &
(y_var > y_var.below_out & y_var < y_var.above_out))
} else {cleaned_message = ""}
# Creates the muti variable scatterplot
ggplot(aes(x = x_var, y = y_var, color = factor(legend_var)),
data = data_set.in) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, size = 1) +
scale_color_brewer(palette = brewer_palette,
guide = guide_legend(title = paste(legend_name, "Line"))) +
ggtitle(paste(y_name, "vs", x_name, "on", legend_name, cleaned_message)) +
xlab(x_name) +
ylab(y_name)
}
scat_boxplot_grid(wqr, quality, "Quality",
volatile.acidity, "Volatile Acidity",
alcohol, "Alcohol % by Volume", TRUE)
plot_box_jit(wqr, quality, "Quality", alcohol, "Alcohol % by Volume", TRUE)
scat_boxplot_grid(wqr, wqr$quality, "Quality",
wqr$sulphates, "Sulphates",
wqr$alcohol, "Alcohol % by Volume", TRUE)
smooth_scatter(wqr, alcohol, "Alcohol % by Volume",
volatile.acidity, "Volatile Acidity",
quality, "Quality",
"Dark2", FALSE)
smooth_scatter(wqr, alcohol, "Alcohol % by Volume",
volatile.acidity, "Volatile Acidity",
quality, "Quality",
"Dark2", TRUE)
smooth_scatter(wqr, volatile.acidity, "Volatile Acidity",
alcohol, "Alcohol % by Volume",
quality, "Quality",
"Dark2", TRUE)
smooth_scatter(wqr, alcohol, "Alcohol % by Volume",
sulphates, "Sulphates",
quality, "Quality",
"Dark2", TRUE)
smooth_scatter(wqr, alcohol, "Alcohol % by Volume",
residual.sugar, "Residual Sugar",
quality, "Quality",
"Dark2", TRUE)
m1 <- lm(quality ~ alcohol, data = wqr)
m2 <- update(m1, ~ . + volatile.acidity)
m3 <- update(m2, ~ . + sulphates)
mtable(m1, m2, m3)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages("ggplot2")
library(ggplot2)
#library(dplyr)
#library(tidyr)
library(GGally)
#library(pastecs)
library(memisc)
library(gridExtra)
library(Hmisc)
# Load the Data
list.files()
wqr <- read.csv("wineQualityReds.csv")
names(wqr)
# function for repeated plots under this section
boxgram_grid <- function(data_set, variable_name, bin_width, var_name) {
title_name = paste(var_name, "Histogram")
p1 <- ggplot(aes(variable_name), data =  data_set) +
geom_histogram(binwidth = bin_width, color = "Black", fill = I("#800020")) +
ggtitle(title_name) +
xlab(var_name)
p2 <- ggplot(aes(x = "Jittered Values", y = variable_name), data = data_set) +
geom_jitter(alpha = 0.1) +
geom_boxplot(alpha = 0.2, color = I("#800020")) +
ggtitle("Box Plot") +
ylab(var_name) +
stat_summary(fun.y = "mean",
geom = "point",
color = "blue",
shape = 20,
size = 3)
grid.arrange(p1, p2, ncol=2)
}
out_message <- function(variable){
# Outlier target
target <- round(mean(variable) + sd(variable) * 3, 2)
message(paste("Values greater than or equal to",
target, "are outliers."))
# Outlier Count
outlier_count <- length(subset(variable, variable >= target))
message(paste("There are", outlier_count, "outliers in this variable."))
}
univar_summary <- function(data_set, variable){
options(scipen=0)
options(digits = 8)
variable <- eval(substitute(variable), data_set)
data_set <- data.frame(variable)
print(summary(data_set$variable))
out_message(data_set$variable)
message("The statistics after outlier removal are shown below:")
print(summary(subset(data_set, select = variable,
variable < mean(variable) + sd(variable) * 3)$variable))
}
boxgram_grid(wqr, wqr$alcohol, 0.5, "Alcohol % by Volume")
univar_summary(wqr, alcohol)
boxgram_grid(wqr, wqr$volatile.acidity, 0.1, "Volatile Acidity")
univar_summary(wqr, volatile.acidity)
boxgram_grid(wqr, wqr$sulphates, 0.1, "Sulphates")
univar_summary(wqr, sulphates)
boxgram_grid(wqr, wqr$citric.acid, 0.05, "Citric Acid")
univar_summary(wqr, citric.acid)
# Discrete data
ggplot(aes(quality), data =  wqr) +
geom_bar(width = 1, color = "Black", fill = I("#800020")) +
scale_x_continuous(breaks = seq(3, 9, 1)) +
ggtitle("Quality of Red Wine - Scale form 0 to 10") +
xlab("Quality Rating") + ylab("Number of Ratings")
describe(wqr$quality)
ggplot(aes(alcohol), data = wqr) +
geom_histogram(binwidth = .4, color = "Black", fill = I("#800020")) +
facet_wrap(~quality, scales = "free") +
ggtitle("Alcohol % by Volume Distributions by Quality")
ggplot(aes(x = alcohol, y = quality), data = wqr) +
geom_point(alpha = 1/4,
color = I("#800020"), fill = I("Black"), size = 2) +
stat_smooth(method = "lm", color = "Black") +
ggtitle("Quality Rank vs. Alcohol % by Volume")
ggplot(aes(x = alcohol, y = quality), data = wqr) +
geom_point(alpha = 1/4, position = position_jitter(),
color = I("#800020"), fill = I("Black"), size = 2) +
stat_smooth(method = "lm", color = "Black") +
ggtitle("Jittered Quality Rank vs. Alcohol % by Volume")
cor.test(wqr$alcohol, wqr$quality)
m1 <- lm(quality ~ alcohol, data = wqr)
summary.lm(m1)
set.seed(20022012)
wqr_samp <- subset(wqr[sample(1:length(wqr$quality), 1000), ], select = -X)
col_index <- function(data_set, column_name){
match(column_name, names(data_set))
}
ggpairs(wqr_samp, columns = c(col_index(wqr_samp, "fixed.acidity"),
col_index(wqr_samp, "pH"),
col_index(wqr_samp, "residual.sugar"),
col_index(wqr_samp, "quality")),
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
ggpairs(wqr_samp, columns = c(col_index(wqr_samp, "chlorides"),
col_index(wqr_samp, "free.sulfur.dioxide"),
col_index(wqr_samp, "total.sulfur.dioxide"),
col_index(wqr_samp, "density"),
col_index(wqr_samp, "quality")),
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
ggpairs(wqr_samp, columns = c(col_index(wqr_samp, "volatile.acidity"),
col_index(wqr_samp, "sulphates"),
col_index(wqr_samp, "citric.acid"),
col_index(wqr_samp, "alcohol"),
col_index(wqr_samp, "quality")),
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
plot_box_jit <- function(data_set,
x_var, x_name,
y_var, y_name,
clean_out){
# Setting variables
x_var <- eval(substitute(x_var), data_set)
y_var <- eval(substitute(y_var), data_set)
data_set.in <- data.frame(y_var, x_var)
if (clean_out) {
#OUTLIER DETECTION
clean_message <- "- No Overall Outliers"
x_var.above_out <- with(data_set.in, mean(x_var) + sd(x_var) * 3)
x_var.below_out <- with(data_set.in, mean(x_var) - sd(x_var) * 3)
y_var.above_out <- with(data_set.in, mean(y_var) + sd(y_var) * 3)
y_var.below_out <- with(data_set.in, mean(y_var) - sd(y_var) * 3)
data_set.in <- subset(data_set.in,
(x_var > x_var.below_out & x_var < x_var.above_out) &
(y_var > y_var.below_out & y_var < y_var.above_out))
} else {clean_message = ""}
# Creating the box plot
ggplot(aes(x = factor(x_var), y = y_var), data = data_set.in) +
geom_jitter(alpha = 0.3) +
geom_boxplot(alpha = .5, color = I("#800020")) +
stat_summary(fun.y = "mean",
geom = "point",
color = "blue",
shape = 20,
size = 2) +
ggtitle(paste(y_name, "on", x_name, "Segments", clean_message)) +
xlab(paste("Factor of", x_name)) +
ylab(y_name)
}
plot_box_jit(wqr, quality, "Quality", alcohol, "Alcohol % by Volume", FALSE)
plot_box_jit(wqr, quality, "Quality", volatile.acidity, "Volatile Acidity", FALSE)
plot_box_jit(wqr, quality, "Quality", sulphates, "Sulphates", FALSE)
scat_boxplot_grid <- function(data_set, qual_var, qual_name,
quant_var, quant_name,
bucket_var, bucket_name, clean_out){
# Setting variables
qual_var <- eval(substitute(qual_var), data_set)
quant_var <- eval(substitute(quant_var), data_set)
bucket_var <- eval(substitute(bucket_var), data_set)
# Creating new set to allow subsetting
data_set.in <- data.frame(qual_var, quant_var, bucket_var)
if (clean_out) {
cleaned_message <- "- No Overall Outliers"
#OUTLIER DETECTION
quant.above_out <- with(data_set.in, mean(quant_var) + sd(quant_var) * 3)
quant.below_out <- with(data_set.in, mean(quant_var) - sd(quant_var) * 3)
buck.above_out <- with(data_set.in, mean(bucket_var) + sd(bucket_var) * 3)
buck.below_out <- with(data_set.in, mean(bucket_var) - sd(bucket_var) * 3)
data_set.in <- subset(data_set.in,
(quant_var > quant.below_out & quant_var < quant.above_out) &
(bucket_var > buck.below_out & bucket_var < buck.above_out))
} else {cleaned_message = ""}
# Creating the scatterplot
p1 <- ggplot(aes(x = bucket_var, y = qual_var, color = quant_var),
data = data_set.in) +
geom_point(position = position_jitter(height = 5),
size = 1) +
stat_smooth(method = "lm", color = "Black") +
ggtitle(paste("Scatter Plot and Box Plot of", qual_name,
"vs \n", bucket_name, "and", quant_name, cleaned_message)) +
guides(color = guide_legend(title = quant_name, reverse = TRUE)) +
xlab(bucket_name) +
ylab(paste("Jittered", qual_name))
# Creating buckets for box plot on quartiles
data_set.in$alcohol.bucket = with(data_set.in,
cut(bucket_var, c(quantile(bucket_var, 0) - .00001,
quantile(bucket_var, .25),
quantile(bucket_var, .50),
quantile(bucket_var, .75),
quantile(bucket_var, 1))))
# Creating the box plot
p2 <- ggplot(aes(x = factor(qual_var), y = quant_var),
data = data_set.in) +
geom_boxplot(aes(fill = alcohol.bucket)) +
scale_fill_brewer(palette = "Reds",
guide = guide_legend(title = paste(bucket_name, "Buckets"))) +
xlab(paste("Factor of", qual_name)) +
ylab(quant_name)
grid.arrange(p1, p2, ncol = 1)
}
smooth_scatter <- function(data_set, x_var, x_name, y_var, y_name,
legend_var, legend_name,
brewer_palette, clean_out){
# Setting the variables and new frame
x_var <- eval(substitute(x_var), data_set)
y_var <- eval(substitute(y_var), data_set)
legend_var <- eval(substitute(legend_var), data_set)
data_set.in <- data.frame(x_var, y_var, legend_var)
if (clean_out) {
cleaned_message <- "- No Overall Outliers"
#OUTLIER DETECTION
x_var.above_out <- with(data_set.in, mean(x_var) + sd(x_var) * 3)
x_var.below_out <- with(data_set.in, mean(x_var) - sd(x_var) * 3)
y_var.above_out <- with(data_set.in, mean(y_var) + sd(y_var) * 3)
y_var.below_out <- with(data_set.in, mean(y_var) - sd(y_var) * 3)
data_set.in <- subset(data_set.in,
(x_var > x_var.below_out & x_var < x_var.above_out) &
(y_var > y_var.below_out & y_var < y_var.above_out))
} else {cleaned_message = ""}
# Creates the muti variable scatterplot
ggplot(aes(x = x_var, y = y_var, color = factor(legend_var)),
data = data_set.in) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, size = 1) +
scale_color_brewer(palette = brewer_palette,
guide = guide_legend(title = paste(legend_name, "Line"))) +
ggtitle(paste(y_name, "vs", x_name, "on", legend_name, cleaned_message)) +
xlab(x_name) +
ylab(y_name)
}
scat_boxplot_grid(wqr, quality, "Quality",
volatile.acidity, "Volatile Acidity",
alcohol, "Alcohol % by Volume", TRUE)
plot_box_jit(wqr, quality, "Quality", alcohol, "Alcohol % by Volume", TRUE)
scat_boxplot_grid(wqr, wqr$quality, "Quality",
wqr$sulphates, "Sulphates",
wqr$alcohol, "Alcohol % by Volume", TRUE)
smooth_scatter(wqr, alcohol, "Alcohol % by Volume",
volatile.acidity, "Volatile Acidity",
quality, "Quality",
"Dark2", FALSE)
smooth_scatter(wqr, alcohol, "Alcohol % by Volume",
volatile.acidity, "Volatile Acidity",
quality, "Quality",
"Dark2", TRUE)
smooth_scatter(wqr, volatile.acidity, "Volatile Acidity",
alcohol, "Alcohol % by Volume",
quality, "Quality",
"Dark2", TRUE)
smooth_scatter(wqr, alcohol, "Alcohol % by Volume",
sulphates, "Sulphates",
quality, "Quality",
"Dark2", TRUE)
smooth_scatter(wqr, alcohol, "Alcohol % by Volume",
residual.sugar, "Residual Sugar",
quality, "Quality",
"Dark2", TRUE)
m1 <- lm(quality ~ alcohol, data = wqr)
m2 <- update(m1, ~ . + volatile.acidity)
m3 <- update(m2, ~ . + sulphates)
mtable(m1, m2, m3)
boxgram_grid(wqr, wqr$alcohol, 0.5, "Alcohol % by Volume")
plot_box_jit(wqr, quality, "Quality", alcohol, "Alcohol % by Volume", TRUE)
smooth_scatter(wqr, volatile.acidity, "Volatile Acidity (g/dm^3)",
alcohol, "Alcohol % by Volume",
quality, "Quality",
"Dark2", TRUE)
